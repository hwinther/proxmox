name: "Create promotion pull request"

# This workflow creates a pull request to promote changes from the main branch to a release branch.
# It is triggered on push to the main branch or manually via workflow_dispatch.
# The workflow checks if the latest release branch exists and increments the version number accordingly.
# If the previous pull request was merged, it creates a new release branch and a draft pull request.

# The first time this workflow is run, it will create a release branch with version 0.1.
# Subsequent runs will increment the minor version number (e.g., 0.1 -> 0.2, 0.2 -> 0.3, etc.).

on:
  workflow_dispatch:
  push:
    branches: ["main", "feat/release-branches"] # change
    tags: ["v*"]

env:
  COMPARE_BRANCH: feat/release-branches # Should be set to the default branch of the repository
  ASSIGNEE: "hwinther" # Replace with the GitHub username of the assignee

jobs:
  promote-default-branch-changes-to-release:
    name: "Promote default branch changes to release branch"
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/heads/feat/release-branches') && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.COMPARE_BRANCH }}
          token: ${{ secrets.WORKFLOW_TOKEN }}

      - name: Determine next release version
        id: next-version
        run: |
          git fetch --all

          # Extract release branches and find the highest version
          latest_version=$(git branch -r | grep -o 'releases/[0-9]\+\.[0-9]\+' | sed 's/releases\///' | sort -V | tail -n 1)
          echo "Latest (current) version: $latest_version"
          echo "latest_version=$latest_version" >> "$GITHUB_OUTPUT"

          # Increment the version
          if [[ -z "$latest_version" ]]; then
            next_version="0.1" # Default to 0.1 if no release branches exist
            initial_release="true"
          else
            major=$(echo $latest_version | cut -d. -f1)
            minor=$(echo $latest_version | cut -d. -f2)
            next_version="$major.$((minor + 1))"
            initial_release="false"
          fi

          echo "Next version: $next_version"
          echo "next_version=$next_version" >> "$GITHUB_OUTPUT"
          next_release_branch="releases/$next_version"
          echo "Next release branch name: $next_release_branch"
          echo "next_release_branch=$next_release_branch" >> "$GITHUB_OUTPUT"
          echo "Initial release: $initial_release"
          echo "initial_release=$initial_release" >> "$GITHUB_OUTPUT"

      - name: Check if previous PR was merged
        id: check-pr-merged
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
        run: |
          prs=$(gh pr list \
              --repo "$GITHUB_REPOSITORY" \
              --base "releases/${{ steps.next-version.outputs.latest_version }}" \
              --head "${{ env.COMPARE_BRANCH }}" \
              --state merged \
              --json number \
              --jq "length")

          if (( prs > 0 )); then
            echo "Previous PR was merged."
            echo "pr_merged=true" >> "$GITHUB_OUTPUT"
          else
            echo "No merged PR found."
            echo "pr_merged=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Create next release branch if previous PR was merged
        if: ${{ steps.check-pr-merged.outputs.pr_merged == 'true' || steps.next-version.outputs.initial_release == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
        run: |
          git fetch origin ${{ steps.next-version.outputs.next_release_branch }} || true
          if ! git show-ref --verify --quiet refs/remotes/origin/${{ steps.next-version.outputs.next_release_branch }}; then
            echo "Creating new release branch: ${{ steps.next-version.outputs.next_release_branch }}"
            git checkout -b ${{ steps.next-version.outputs.next_release_branch }} ${{ env.COMPARE_BRANCH }}
            git push origin ${{ steps.next-version.outputs.next_release_branch }}

            if [[ "${{ steps.next-version.outputs.initial_release }}" == "true" ]]; then
              git tag -a "v${{ steps.next-version.outputs.next_version }}" -m "Release version ${{ steps.next-version.outputs.next_version }}"
              git push origin "v${{ steps.next-version.outputs.next_version }}"
            fi
          else
            echo "Release branch ${{ steps.next-version.outputs.next_release_branch }} already exists."
          fi

      - name: Create Draft Pull Request
        if: ${{ steps.check-pr-merged.outputs.pr_merged == 'true' }}
        env:
          GH_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
        run: |
          echo "Creating draft pull request..."
          gh pr create \
            --base ${{ steps.next-version.outputs.next_release_branch }} \
            --head ${{ env.COMPARE_BRANCH }} \
            --title "Merge changes from ${{ env.COMPARE_BRANCH }} to ${{ steps.next-version.outputs.next_release_branch }}" \
            --fill \
            --assignee ${{ env.ASSIGNEE }} \
            --draft

  create-tags-on-push-to-release-branch:
    name: "Create tag for current release version"
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/heads/releases/') && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}

      - name: Determine release version from branch name
        id: extract-version
        run: |
          branch_name="${{ github.ref_name }}"
          base_version="${branch_name#releases/}"

          git fetch --tags
          highest_patch=$(git tag -l "v${base_version}.*" | sed "s/v${base_version}.//" | sort -n | tail -n 1)

          if [[ -z "$highest_patch" ]]; then
            next_patch=0
          else
            next_patch=$((highest_patch + 1))
          fi

          release_version="${base_version}.${next_patch}"
          echo "Next release version: $release_version"
          echo "release_version=$release_version" >> "$GITHUB_OUTPUT"

      - name: Create and push tag
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
        run: |
          git tag -a "v${{ steps.extract-version.outputs.release_version }}" -m "Release version ${{ steps.extract-version.outputs.release_version }}"
          git push origin "v${{ steps.extract-version.outputs.release_version }}"

  tag-push:
    name: Handle tag push
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}

      - name: Handle tag push
        run: |
          echo "Tag pushed: ${{ github.ref }}"
          # Add your logic here to handle the tag push event
