name: "Create promotion pull request"

on:
  workflow_dispatch:
  push:
    branches: ["main", "feat/release-branches"]

jobs:
  promote-main-to-release:
    runs-on: ubuntu-latest
    # if: github.ref == 'refs/heads/main'
    env:
      # COMPARE_BRANCH: main ####
      COMPARE_BRANCH: feat/release-branches
      ASSIGNEE: "hwinther"
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.COMPARE_BRANCH }}
          token: ${{ secrets.WORKFLOW_TOKEN }}

      - name: Determine next release version
        id: next-version
        run: |
          git fetch --all

          # Extract release branches and find the highest version
          latest_version=$(git branch -r | grep -o 'releases/[0-9]\+\.[0-9]\+' | sed 's/releases\///' | sort -V | tail -n 1)
          echo "Latest (current) version: $latest_version"
          echo "latest_version=$latest_version" >> "$GITHUB_OUTPUT"

          # Increment the version
          if [[ -z "$latest_version" ]]; then
            next_version="0.1" # Default to 0.1 if no release branches exist
            initial_release="true"
          else
            major=$(echo $latest_version | cut -d. -f1)
            minor=$(echo $latest_version | cut -d. -f2)
            next_version="$major.$((minor + 1))"
            initial_release="false"
          fi

          echo "Next version: $next_version"
          echo "next_version=$next_version" >> "$GITHUB_OUTPUT"
          next_release_branch="releases/$next_version"
          echo "Next release branch name: $next_release_branch"
          echo "next_release_branch=$next_release_branch" >> "$GITHUB_OUTPUT"
          echo "Initial release: $initial_release"
          echo "initial_release=$initial_release" >> "$GITHUB_OUTPUT"

      - name: Check if previous PR was merged
        id: check-pr-merged
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
        run: |
          prs=$(gh pr list \
              --repo "$GITHUB_REPOSITORY" \
              --base "releases/${{ steps.next-version.outputs.latest_version }}" \
              --head "${{ env.COMPARE_BRANCH }}" \
              --state merged \
              --json number \
              --jq "length")

          if (( prs > 0 )); then
            echo "Previous PR was merged."
            echo "pr_merged=true" >> "$GITHUB_OUTPUT"
          else
            echo "No merged PR found."
            echo "pr_merged=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Create next release branch if previous PR was merged
        if: ${{ steps.check-pr-merged.outputs.pr_merged == 'true' || steps.next-version.outputs.initial_release == 'true' }}
        run: |
          git fetch origin ${{ steps.next-version.outputs.next_release_branch }} || true
          if ! git show-ref --verify --quiet refs/remotes/origin/${{ steps.next-version.outputs.next_release_branch }}; then
            echo "Creating new release branch: ${{ steps.next-version.outputs.next_release_branch }}"
            git checkout -b ${{ steps.next-version.outputs.next_release_branch }} ${{ env.COMPARE_BRANCH }}
            git push origin ${{ steps.next-version.outputs.next_release_branch }}
          else
            echo "Release branch ${{ steps.next-version.outputs.next_release_branch }} already exists."
          fi

      - name: Create Draft Pull Request
        if: ${{ steps.check-pr-merged.outputs.pr_merged == 'true' || steps.next-version.outputs.initial_release == 'true' }}
        env:
          GH_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
        run: |
          echo "Creating draft pull request..."
          gh pr create \
            --base ${{ steps.next-version.outputs.next_release_branch }} \
            --head ${{ env.COMPARE_BRANCH }} \
            --title "Merge changes from ${{ env.COMPARE_BRANCH }} to ${{ steps.next-version.outputs.next_release_branch }}" \
            --fill \
            --assignee ${{ env.ASSIGNEE }} \
            --draft
